Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії




ЗВІТ
з лабораторної роботи №3
з дисципліни «Архітектура програмного забезпечення»
на тему: «РОЗРОБКА ВЕБКЛІЄНТА СИСТЕМИ»




Виконав
ст. гр. ПЗПІ-22-3
Шуть Олександр Вікторович



Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович





Харків 2025
1 ІСТОРІЯ ЗМІН

№	Дата	Версія звіту	Опис змін та виправлень
1	08.05.2025	0.1	Створено структуру звіту. Визначено завдання на лабораторну роботу
2	12.05.2025	0.1	Описано хід роботи, додаток А, додаток Б, додаток В. Сформульовано висновок роботи
2 ЗАВДАННЯ

     Метою даного лабораторного заняття є розробка клієнтської / front-end частини програмної системи.

3 ОПИС ВИКОНАНОЇ РОБОТИ

     До виконаної роботи було створено відеозвіт, посилання на який наведено у додатку А.
     Усі графічні матеріали наведені у додатку Б. 
     У рамках виконання завдання було розроблено клієнтську частину вебдодатку з використанням бібліотеки React, що забезпечило створення інтерактивного та функціонального інтерфейсу. Робота розпочалася з ініціалізації проєкту, під час якої було налаштовано базову структуру додатку, включаючи маршрутизацію та основні залежності. Надалі було створено набір сторінок, таких як домашня сторінка, сторінки авторизації та реєстрації, а також сторінки для управління кімнатами, адміністрування бази даних, системного адміністрування та платформного адміністрування, що разом сформували цілісну систему для взаємодії користувача з додатком.
     Основна увага під час розробки була зосереджена на забезпеченні зручності та інтуїтивності інтерфейсу, а також на реалізації ключових функціональних можливостей. Було впроваджено компоненти для відображення даних про кімнати, зокрема їхні кліматичні параметри, аналітичні графіки, таблиці кореляцій, тренди та рекомендації. Окремо реалізовано функціонал адміністрування, який дозволяє управляти користувачами, створювати та відновлювати резервні копії бази даних, а також експортувати та імпортувати конфігурації системи. Для забезпечення коректної роботи було використано глобальний стан через Zustand, що дало змогу ефективно керувати даними між компонентами.
     Значна частина роботи була присвячена впровадженню локалізації з використанням бібліотеки react-i18next. Для кожної сторінки створено набір перекладів на англійську та українську мови, що дозволило адаптувати інтерфейс до потреб багатомовних користувачів. Додатково було реалізовано логіку переведення температури з градусів Цельсія в Фаренгейти для англійської локалізації.
     Для забезпечення візуальної привабливості та зручності використання було розроблено стилі з використанням styled-components, які застосовувалися до всіх компонентів. Стилі були створені з акцентом на сучасний дизайн, адаптивність та єдність стилістичного оформлення. У результаті виконаної роботи було створено функціональний вебдодаток із зручним інтерфейсом, підтримкою локалізації та можливостями адміністрування, що відповідає поставленим вимогам
     Деякий код застосунку наведено у додатку В.

ВИСНОВКИ

     У результаті виконання даної лабораторної роботи було розроблено клієнтську частину вебдодатку на базі React, що включає зручний інтерфейс для взаємодії з користувачами. Створено ключові сторінки, зокрема домашню, авторизацію, реєстрацію, а також панелі адміністрування, які дозволяють ефективно управляти користувачами, кімнатами, базою даних та системними налаштуваннями. Особливу увагу приділено реалізації локалізації, що забезпечує підтримку англійської та української мов, а також адаптацію відображення даних, таких як температура, залежно від обраної мови.

ДОДАТОК А
Відеозапис

     Відеозапис презентації результатів лабораторної роботи: https://youtu.be/s3Ceun7dSQ8

Хронологічний опис відеозапису: 
00:00 Вітання. Мовець вітається та визначає тему відеозвіту.
00:28 Загальний функціонал. Демострується загальний функціонал. Операції над об’єктами системи.
01:46 Функції бізнес логіки. Аналітика кімнати.
02:32 Функції платформного адміністратора. Демонструється функціонал зміни ролей користувачів.
03:30 Функції адміністратора баз даних.
04:17 Функції адміністратора системного адміністратора.
05:20 Локалізація та інтерналізація.
06:11 Висновки.






ДОДАТОК Б
Графічні матеріали


Рисунок Б.1 — ER-діаграма даних


Рисунок Б.2 — Структура бази даних



Рисунок Б.3 — UML-діаграма прецедентів

Рисунок Б.4 — UML діаграма компонентів


Рисунок Б.5 – Діаграма діяльності для створення резервної копії та відновлення бази даних


Рисунок Б.6 – UML діаграма взаємодії. Створення резервної копії бази даних




ДОДАТОК В
Програмний код

     В.1 Математична обробка прикладних даних.

     GitHub репозиторій: https://github.com/NureShutOleksandr/apz-pzpi-22-3-shut-oleksandr/blob/main/Lab3/pzpi-22-3-shut-oleksandr-lab3/src/pages/dashboards/room.page.tsx

1 import React, { useState } from 'react'
2 import { useParams } from 'react-router-dom'
3 import MainLayout from '@shared/layouts/main.layout'
4 import styled from 'styled-components'
5 import { useRoomStore } from '@store/rooms.store'
6 import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts'
7 import { useAuthStore } from '@store/store'
8 import { useTranslation } from 'react-i18next'
9 import { temperatureToDisplay } from '@utils/parsers'
10 
11 export const RoomPage: React.FC = () => {
12   const { t, i18n } = useTranslation()
13 
14   const { roomId } = useParams<{ roomId: string }>()
15   const rooms = useRoomStore(state => state.rooms)
16   const analyzeRoom = useRoomStore(state => state.analyzeRoom)
17   const roomAnalysis = useRoomStore(state => state.roomStatistic)
18   const userId = useAuthStore(state => state.user)
19
20   const [isAnalysisVisible, setIsAnalysisVisible] = useState(false)
21
22   const room = rooms?.find(r => r._id.toString() === roomId)
23
24   const handleAnalyzeData = async () => {
25     if (roomId) {
26       await analyzeRoom(roomId, userId?._id)
27       setIsAnalysisVisible(true)
28     }
29   }
30
31   if (!room) {
32     return <MainLayout>No room found</MainLayout>
33   }
34
35   const statsData = roomAnalysis?.analysis.statistics
36   const parametersStats = [
37     {
38       name: t('roomsDashboard.temperature'),
39       Mean: temperatureToDisplay(i18n.language, statsData?.temperature_mean),
40       Median: temperatureToDisplay(i18n.language, statsData?.temperature_median),
41       Min: temperatureToDisplay(i18n.language, statsData?.temperature_min),
42       Max: temperatureToDisplay(i18n.language, statsData?.temperature_max),
43     },
44     {
45       name: t('roomsDashboard.moisture'),
46       Mean: statsData?.moisture_mean,
47       Median: statsData?.moisture_median,
48       Min: statsData?.moisture_min,
49       Max: statsData?.moisture_max,
50     },
51     {
52       name: t('roomsDashboard.co2'),
53       Mean: statsData?.carbonDioxide_mean,
54       Median: statsData?.carbonDioxide_median,
55       Min: statsData?.carbonDioxide_min,
56       Max: statsData?.carbonDioxide_max,
57     },
58     {
59       name: t('roomsDashboard.illumination'),
60       Mean: statsData?.illumination_mean,
61       Median: statsData?.illumination_median,
62       Min: statsData?.illumination_min,
63       Max: statsData?.illumination_max,
64     },
65   ]
66
67   return (
68     <MainLayout mainStyle={{ display: 'flex', justifyContent: 'center', alignItems: 'flex-start', padding: '2rem 0' }}>
69       <RoomContainer>
70         <RoomHeader>
71           <RoomTitle>{room.roomName}</RoomTitle>
72         </RoomHeader>
73         <RoomDetails>
74           <Detail>{t('room.temperature', { value: temperatureToDisplay(i18n.language, room.temperature) })}</Detail>
75           <Detail>{t('room.moisture', { value: room.moisture })}</Detail>
76           <Detail>{t('room.co2', { value: room.carbonDioxide })}</Detail>
77           <Detail>{t('room.illumination', { value: room.illumination })}</Detail>
78         </RoomDetails>
79         <AnalyzeButton onClick={handleAnalyzeData}>{t('room.analyzeButton')}</AnalyzeButton>
80
81         {isAnalysisVisible && roomAnalysis?.analysis && (
82           <AnalysisSection>
83             <SectionTitle>{t('room.analyticsSection')}</SectionTitle>
84
85             <ChartContainer>
86               <SectionSubtitle>{t('room.parameterStats')}</SectionSubtitle>
87               {parametersStats.map(param => (
88                 <ChartWrapper key={param.name}>
89                   <ResponsiveContainer width="100%" height={250}>
90                     <BarChart data={[param]} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
91                       <CartesianGrid strokeDasharray="3 3" />
92                       <XAxis dataKey="name" />
93                       <YAxis />
94                       <Tooltip />
95                       <Legend />
96                       <Bar dataKey="Mean" fill="#4a90e2" name={t('room.mean')} />
97                       <Bar dataKey="Median" fill="#82ca9d" name={t('room.median')} />
98                       <Bar dataKey="Min" fill="#ff6f61" name={t('room.min')} />
99                       <Bar dataKey="Max" fill="#f1c40f" name={t('room.max')} />
100                     </BarChart>
101                   </ResponsiveContainer>
102                 </ChartWrapper>
103               ))}
104             </ChartContainer>
105
106             <CorrelationSection>
107               <SectionSubtitle>{t('room.correlationsSection')}</SectionSubtitle>
108               <CorrelationTable>
109                 <thead>
110                   <tr>
111                     <TableHeader>{t('room.parameterPair')}</TableHeader>
112                     <TableHeader>{t('room.correlationCoefficient')}</TableHeader>
113                   </tr>
114                 </thead>
115                 <tbody>
116                   {Object.entries(roomAnalysis.analysis.correlation).map(([pair, value]) => (
117                     <TableRow key={pair}>
118                       <TableCell>{pair.replace('-', ' and ')}</TableCell>
119                       <TableCell>{value !== null ? value.toFixed(2) : t('room.noData')}</TableCell>
120                     </TableRow>
121                   ))}
122                 </tbody>
123               </CorrelationTable>
124             </CorrelationSection>
125
126             <TrendsSection>
127               <SectionSubtitle>{t('room.trendsSection')}</SectionSubtitle>
128               <TrendsList>
129                 {roomAnalysis.analysis.trends.map((trend, index) => (
130                   <TrendItem key={index}>{trend}</TrendItem>
131                 ))}
132               </TrendsList>
133             </TrendsSection>
134 
135             <RecommendationsSection>
136               <SectionSubtitle>{t('room.recommendationsSection')}</SectionSubtitle>
137               <RecommendationsList>
138                 {roomAnalysis.analysis.recommendations.map((recommendation, index) => (
139                   <RecommendationItem key={index}>{recommendation}</RecommendationItem>
140                 ))}
141               </RecommendationsList>
142             </RecommendationsSection>
143
144             <RegressionSection>
145               <SectionSubtitle>{t('room.regressionSection')}</SectionSubtitle>
146               <RegressionText>{roomAnalysis.analysis.regression}</RegressionText>
147             </RegressionSection>
148           </AnalysisSection>
149         )}
150       </RoomContainer>
151     </MainLayout>
152   )
153 }
154
155 const RoomContainer = styled.div`
156   width: 100%;
157   max-width: 800px;
158   background-color: #fff;
159   border-radius: 12px;
160   box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
161   padding: 1.5rem;
162 `
163
164 const RoomHeader = styled.div`
165   margin-bottom: 1.5rem;
166 `
167
168 const RoomTitle = styled.h2`
169   font-size: 1.8rem;
170   color: #333;
171   margin: 0;
172 `
173
174 const RoomDetails = styled.div`
175   display: flex;
176   flex-direction: column;
177   gap: 1rem;
178   margin-bottom: 1.5rem;
179 `
180
181 const Detail = styled.p`
182   margin: 0;
183   font-size: 0.9rem;
184   color: #7f8c8d;
185 `
186
187 const AnalyzeButton = styled.button`
188   padding: 0.75rem 1.5rem;
189   background-color: #e74c3c;
190   color: #fff;
191   border: none;
192   border-radius: 8px;
193   font-weight: 500;
194   cursor: pointer;
195   transition: background-color 0.3s ease;
196   margin-bottom: 1.5rem;
197
198   &:hover {
199     background-color: #c0392b;
200   }
201
202   &:focus {
203     outline: none;
204     box-shadow: 0 0 0 3px rgba(231, 76, 60, 0.3);
205   }
206 `
207
208 const AnalysisSection = styled.div`
209   margin-top: 2rem;
210 `
211
212 const SectionTitle = styled.h3`
213   font-size: 1.5rem;
214   color: #333;
215   margin-bottom: 1rem;
216 `
217
218 const SectionSubtitle = styled.h4`
219   font-size: 1.2rem;
220   color: #2c3e50;
221   margin-bottom: 1rem;
222 `
223
224 const ChartContainer = styled.div`
225   margin-bottom: 2rem;
226 `
227
228 const ChartWrapper = styled.div`
229   margin-bottom: 2rem;
230 `
231
232 const CorrelationSection = styled.div`
233   margin-bottom: 2rem;
234 `
235
236 const CorrelationTable = styled.table`
237   width: 100%;
238   border-collapse: collapse;
239 `
240
241 const TableHeader = styled.th`
242   padding: 0.75rem;
243   background-color: #f5f5f5;
244   color: #333;
245   text-align: left;
246   border-bottom: 1px solid #ddd;
247 `
248
249 const TableRow = styled.tr`
250   &:nth-child(even) {
251     background-color: #f9f9f9;
252   }
253 `
254
255 const TableCell = styled.td`
256   padding: 0.75rem;
257   border-bottom: 1px solid #ddd;
258   color: #7f8c8d;
259 `
260
261 const TrendsSection = styled.div`
262   margin-bottom: 2rem;
263 `
264
265 const TrendsList = styled.ul`
266   list-style: none;
267   padding: 0;
268 `
269
270 const TrendItem = styled.li`
271   padding: 0.5rem 0;
272   color: #2c3e50;
273   &:before {
274     content: '• ';
275     color: #4a90e2;
276   }
277 `
278
279 const RecommendationsSection = styled.div`
280   margin-bottom: 2rem;
281 `
282
283 const RecommendationsList = styled.ul`
284   list-style: none;
285   padding: 0;
286 `
287
288 const RecommendationItem = styled.li`
289   padding: 0.5rem 0;
290   color: #2c3e50;
291   &:before {
292     content: '✔ ';
293     color: #27ae60;
294   }
295 `
296
297 const RegressionSection = styled.div`
298   margin-bottom: 2rem;
299 `
300
301 const RegressionText = styled.p`
302   color: #7f8c8d;
303   font-style: italic;
304 `




     В.2 Адміністрування бізнес-логіки системи.

     GitHub репозиторій: https://github.com/NureShutOleksandr/apz-pzpi-22-3-shut-oleksandr/blob/main/Lab3/pzpi-22-3-shut-oleksandr-lab3/src/pages/dashboards/system-admin-dashboard.page.tsx

1 import React, { useState } from 'react'
2 import MainLayout from '@shared/layouts/main.layout'
3 import styled from 'styled-components'
4 import { useSystemAdminStore } from '@store/systemAdmin.store'
5 import { configExample } from '@shared/consts/config-example.const'
6 import { useTranslation } from 'react-i18next'
7
8 export const SystemAdminDashboard: React.FC = () => {
9   const { lastExportedConfig, isExporting, isImporting, exportConfig, importConfig } = useSystemAdminStore()
10   // eslint-disable-next-line @typescript-eslint/no-explicit-any
11   const [importConfigData, setImportConfigData] = useState<any[]>(configExample)
12   const { t } = useTranslation()
13
14   const handleExportConfig = async () => {
15     try {
16       const blob = await exportConfig()
17       const url = window.URL.createObjectURL(blob)
18       const link = document.createElement('a')
19       link.href = url
20       link.setAttribute('download', 'climate-config.json')
21       document.body.appendChild(link)
22       link.click()
23       link.remove()
24       window.URL.revokeObjectURL(url)
25     } catch (error) {
26       console.error('Failed to export config:', error)
27     }
28   }
29
30   const handleImportConfig = async () => {
31     try {
32       await importConfig(importConfigData)
33     } catch (error) {
34       console.error('Failed to import config:', error)
35     }
36   }
37
38   return (
39     <MainLayout mainStyle={{ display: 'flex', justifyContent: 'center', alignItems: 'flex-start', padding: '2rem 0' }}>
40       <DashboardContainer>
41         <Header>
42           <Title>{t('systemAdminDashboard.title')}</Title>
43         </Header>
44         <ActionsList>
45           <ActionItem>
46             <ActionLabel>{t('systemAdminDashboard.exportConfiguration')}</ActionLabel>
47             <ExportButton onClick={handleExportConfig} disabled={isExporting}>
48               {isExporting ? t('systemAdminDashboard.exporting') : t('systemAdminDashboard.exportButton')}
49             </ExportButton>
50             {lastExportedConfig && (
51               <ConfigPreview>
52                 <ConfigLabel>{t('systemAdminDashboard.lastExportedConfig')}</ConfigLabel>
53                 <pre>{JSON.stringify(lastExportedConfig, null, 2)}</pre>
54               </ConfigPreview>
55             )}
56           </ActionItem>
57           <ActionItem>
58             <ActionLabel>{t('systemAdminDashboard.importConfiguration')}</ActionLabel>
59             <ImportInput
60               value={JSON.stringify(importConfigData, null, 2)}
61               onChange={e => setImportConfigData(JSON.parse(e.target.value))}
62               placeholder={t('systemAdminDashboard.pasteConfigJson')}
63               disabled={isImporting}
64             />
65             <ImportButton onClick={handleImportConfig} disabled={isImporting}>
66               {isImporting ? t('systemAdminDashboard.importing') : t('systemAdminDashboard.importButton')}
67             </ImportButton>
68           </ActionItem>
69         </ActionsList>
70       </DashboardContainer>
71     </MainLayout>
72   )
73 }
74
75 const DashboardContainer = styled.div`
76   width: 100%;
77   max-width: 800px;
78   background-color: #fff;
79   border-radius: 12px;
80   box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
81   padding: 1.5rem;
82 `
83
84 const Header = styled.div`
85   margin-bottom: 1.5rem;
86 `
87
88 const Title = styled.h2`
89   font-size: 1.8rem;
90   color: #333;
91   margin: 0;
92 `
93
94 const ActionsList = styled.ul`
95   list-style: none;
96   padding: 0;
97 `
98
99 const ActionItem = styled.li`
100   padding: 1rem;
101   border-bottom: 1px solid #eee;
102   &:last-child {
103     border-bottom: none;
104   }
105 `
106
107 const ActionLabel = styled.h3`
108   font-size: 1.2rem;
109   color: #2c3e50;
110   margin-bottom: 0.5rem;
111 `
112
113 const ExportButton = styled.button`
114   padding: 0.75rem 1.5rem;
115   background-color: #4a90e2;
116   color: #fff;
117   border: none;
118   border-radius: 8px;
119   font-weight: 500;
120   cursor: pointer;
121   transition: background-color 0.3s ease;
122
123   &:hover:not(:disabled) {
124     background-color: #357abd;
125   }
126
127   &:focus {
128     outline: none;
129     box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.3);
130   }
131
132   &:disabled {
133     background-color: #a3bffa;
134     cursor: not-allowed;
135   }
136 `
137
138 const ImportButton = styled.button`
139   padding: 0.75rem 1.5rem;
140   background-color: #2ecc71;
141   color: #fff;
142   border: none;
143   border-radius: 8px;
144   font-weight: 500;
145   cursor: pointer;
146   transition: background-color 0.3s ease;
147
148   &:hover:not(:disabled) {
149     background-color: #27ae60;
150   }
151
152   &:focus {
153     outline: none;
154     box-shadow: 0 0 0 3px rgba(46, 204, 113, 0.3);
155   }
156
157   &:disabled {
158     background-color: #a3d9b1;
159     cursor: not-allowed;
160   }
161 `
162
163 const ImportInput = styled.textarea`
164   padding: 0.75rem;
165   border: 1px solid #ddd;
166   border-radius: 8px;
167   font-size: 1rem;
168   outline: none;
169   transition: border-color 0.3s ease;
170   width: 100%;
171   min-height: 150px;
172   resize: vertical;
173
174   &:focus {
175     border-color: #4a90e2;
176   }
177
178   &:disabled {
179     background-color: #f5f5f5;
180     cursor: not-allowed;
181   }
182
183   &::placeholder {
184     color: #999;
185   }
186 `
187
188 const ConfigPreview = styled.div`
189   margin-top: 0.5rem;
190   padding: 0.5rem;
191   background-color: #f9f9f9;
192   border-radius: 4px;
193   overflow-x: auto;
194 `
195
196 const ConfigLabel = styled.p`
197   margin: 0 0 0.5rem 0;
198   font-size: 0.9rem;
199   color: #7f8c8d;
200 `

     В.3 Резервне копіювання користувацьких даних

     GitHub репозиторій: https://github.com/NureShutOleksandr/apz-pzpi-22-3-shut-oleksandr/blob/main/Lab3/pzpi-22-3-shut-oleksandr-lab3/src/pages/dashboards/db-admin-dashboard.page.tsx

1 import React, { useState } from 'react'
2 import MainLayout from '@shared/layouts/main.layout'
3 import styled from 'styled-components'
4 import { useDbAdminStore } from '@store/dbAdmin.store'
5 import { useTranslation } from 'react-i18next'
6
7 export const DbAdminDashboard: React.FC = () => {
8   const { t } = useTranslation()
9   const { lastBackupPath, isCreatingBackup, isRestoringBackup, createBackup, restoreBackup } = useDbAdminStore()
10   const [backupName, setBackupName] = useState('')
11
12   const handleCreateBackup = async () => {
13     try {
14       await createBackup()
15     } catch (error) {
16       console.error('Failed to create backup:', error)
17     }
18   }
19
20   const handleRestoreBackup = async () => {
21     if (!backupName) {
22       alert('Please enter a backup name')
23       return
24     }
25     try {
26       await restoreBackup(backupName)
27     } catch (error) {
28       console.error('Failed to restore backup:', error)
29     }
30   }
31
32   return (
33     <MainLayout mainStyle={{ display: 'flex', justifyContent: 'center', alignItems: 'flex-start', padding: '2rem 0' }}>
34       <DashboardContainer>
35         <Header>
36           <Title>{t('dbAdminDashboard.title')}</Title>
37         </Header>
38         <ActionsList>
39           <ActionItem>
40             <ActionLabel>{t('dbAdminDashboard.createBackup')}</ActionLabel>
41             <CreateBackupButton onClick={handleCreateBackup} disabled={isCreatingBackup}>
42               {isCreatingBackup ? t('dbAdminDashboard.creating') : t('dbAdminDashboard.createBackupButton')}
43             </CreateBackupButton>
44             {lastBackupPath && (
45               <BackupPath>{t('dbAdminDashboard.lastBackupPath', { path: lastBackupPath })}</BackupPath>
46             )}
47           </ActionItem>
48           <ActionItem>
49             <ActionLabel>{t('dbAdminDashboard.restoreBackup')}</ActionLabel>
50             <InputGroup>
51               <RestoreInput
52                 type="text"
53                 value={backupName}
54                 onChange={e => setBackupName(e.target.value)}
55                 placeholder={t('dbAdminDashboard.enterBackupFolderName')}
56                 disabled={isRestoringBackup}
57               />
58               <RestoreButton onClick={handleRestoreBackup} disabled={isRestoringBackup}>
59                 {isRestoringBackup ? t('dbAdminDashboard.restoring') : t('dbAdminDashboard.restoreButton')}
60               </RestoreButton>
61             </InputGroup>
62           </ActionItem>
63         </ActionsList>
64       </DashboardContainer>
65     </MainLayout>
66   )
67 }
68
69 const DashboardContainer = styled.div`
70   width: 100%;
71   max-width: 800px;
72   background-color: #fff;
73   border-radius: 12px;
74   box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
75   padding: 1.5rem;
76 `
77
78 const Header = styled.div`
79   margin-bottom: 1.5rem;
80 `
81
82 const Title = styled.h2`
83   font-size: 1.8rem;
84   color: #333;
85   margin: 0;
86 `
87
88 const ActionsList = styled.ul`
89   list-style: none;
90   padding: 0;
91 `
92
93 const ActionItem = styled.li`
94   padding: 1rem;
95   border-bottom: 1px solid #eee;
96   &:last-child {
97     border-bottom: none;
98   }
99 `
100
101 const ActionLabel = styled.h3`
102   font-size: 1.2rem;
103   color: #2c3e50;
104   margin-bottom: 0.5rem;
105 `
106
107 const CreateBackupButton = styled.button`
108   padding: 0.75rem 1.5rem;
109   background-color: #4a90e2;
110   color: #fff;
111   border: none;
112   border-radius: 8px;
113   font-weight: 500;
114   cursor: pointer;
115   transition: background-color 0.3s ease;
116
117   &:hover:not(:disabled) {
118     background-color: #357abd;
119   }
120
121   &:focus {
122     outline: none;
123     box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.3);
124   }
125
126   &:disabled {
127     background-color: #a3bffa;
128     cursor: not-allowed;
129   }
130 `
131
132 const RestoreButton = styled.button`
133   padding: 0.75rem 1.5rem;
134   background-color: #2ecc71;
135   color: #fff;
136   border: none;
137   border-radius: 8px;
138   font-weight: 500;
139   cursor: pointer;
140   transition: background-color 0.3s ease;
141
142   &:hover:not(:disabled) {
143     background-color: #27ae60;
144   }
145
146   &:focus {
147     outline: none;
148     box-shadow: 0 0 0 3px rgba(46, 204, 113, 0.3);
149   }
150
151   &:disabled {
152     background-color: #a3d9b1;
153     cursor: not-allowed;
154   }
155 `
156
157 const InputGroup = styled.div`
158   display: flex;
159   gap: 0.5rem;
160 `
161
162 const RestoreInput = styled.input`
163   padding: 0.75rem;
164   border: 1px solid #ddd;
165   border-radius: 8px;
166   font-size: 1rem;
167   outline: none;
168   transition: border-color 0.3s ease;
169   flex: 1;
170
171   &:focus {
172     border-color: #4a90e2;
173   }
174
175   &:disabled {
176     background-color: #f5f5f5;
177     cursor: not-allowed;
178   }
179
180   &::placeholder {
181     color: #999;
182   }
183 `
184
185 const BackupPath = styled.p`
186   margin-top: 0.5rem;
187   font-size: 0.9rem;
188   color: #7f8c8d;
189 `

