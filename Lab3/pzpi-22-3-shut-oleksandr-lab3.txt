Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії




ЗВІТ
з лабораторної роботи №3
з дисципліни «Архітектура програмного забезпечення»
на тему: «РОЗРОБКА ВЕБКЛІЄНТА СИСТЕМИ»




Виконав
ст. гр. ПЗПІ-22-3
Шуть Олександр Вікторович



Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович





Харків 2025
1 ІСТОРІЯ ЗМІН

№	Дата	Версія звіту	Опис змін та виправлень
1	08.05.2025	0.1	Створено структуру звіту. Визначено завдання на лабораторну роботу
2	12.05.2025	0.1	Описано хід роботи, додаток А, додаток Б, додаток В. Сформульовано висновок роботи

2 ЗАВДАННЯ

     Метою даного лабораторного заняття є розробка клієнтської / front-end частини програмної системи.

3 ОПИС ВИКОНАНОЇ РОБОТИ

     До виконаної роботи було створено відеозвіт, посилання на який наведено у додатку А.
     Усі графічні матеріали наведені у додатку Б. 
     У рамках виконання завдання було розроблено клієнтську частину вебдодатку з використанням бібліотеки React, що забезпечило створення інтерактивного та функціонального інтерфейсу. Робота розпочалася з ініціалізації проєкту, під час якої було налаштовано базову структуру додатку, включаючи маршрутизацію та основні залежності. Надалі було створено набір сторінок, таких як домашня сторінка, сторінки авторизації та реєстрації, а також сторінки для управління кімнатами, адміністрування бази даних, системного адміністрування та платформного адміністрування, що разом сформували цілісну систему для взаємодії користувача з додатком.
     Основна увага під час розробки була зосереджена на забезпеченні зручності та інтуїтивності інтерфейсу, а також на реалізації ключових функціональних можливостей. Було впроваджено компоненти для відображення даних про кімнати, зокрема їхні кліматичні параметри, аналітичні графіки, таблиці кореляцій, тренди та рекомендації. Окремо реалізовано функціонал адміністрування, який дозволяє управляти користувачами, створювати та відновлювати резервні копії бази даних, а також експортувати та імпортувати конфігурації системи. Для забезпечення коректної роботи було використано глобальний стан через Zustand, що дало змогу ефективно керувати даними між компонентами.
     Значна частина роботи була присвячена впровадженню локалізації з використанням бібліотеки react-i18next. Для кожної сторінки створено набір перекладів на англійську та українську мови, що дозволило адаптувати інтерфейс до потреб багатомовних користувачів. Додатково було реалізовано логіку переведення температури з градусів Цельсія в Фаренгейти для англійської локалізації.
     Для забезпечення візуальної привабливості та зручності використання було розроблено стилі з використанням styled-components, які застосовувалися до всіх компонентів. Стилі були створені з акцентом на сучасний дизайн, адаптивність та єдність стилістичного оформлення. У результаті виконаної роботи було створено функціональний вебдодаток із зручним інтерфейсом, підтримкою локалізації та можливостями адміністрування, що відповідає поставленим вимогам
     Деякий код застосунку наведено у додатку В.

ВИСНОВКИ

     У результаті виконання даної лабораторної роботи було розроблено клієнтську частину вебдодатку на базі React, що включає зручний інтерфейс для взаємодії з користувачами. Створено ключові сторінки, зокрема домашню, авторизацію, реєстрацію, а також панелі адміністрування, які дозволяють ефективно управляти користувачами, кімнатами, базою даних та системними налаштуваннями. Особливу увагу приділено реалізації локалізації, що забезпечує підтримку англійської та української мов, а також адаптацію відображення даних, таких як температура, залежно від обраної мови.

ДОДАТОК А
Відеозапис

     Відеозапис презентації результатів лабораторної роботи: https://youtu.be/s3Ceun7dSQ8

Хронологічний опис відеозапису: 
00:00 Вітання. Мовець вітається та визначає тему відеозвіту.
00:28 Загальний функціонал. Демострується загальний функціонал. Операції над об’єктами системи.
01:46 Функції бізнес логіки. Аналітика кімнати.
02:32 Функції платформного адміністратора. Демонструється функціонал зміни ролей користувачів.
03:30 Функції адміністратора баз даних.
04:17 Функції адміністратора системного адміністратора.
05:20 Локалізація та інтерналізація.
06:11 Висновки.






ДОДАТОК Б
Графічні матеріали


Рисунок Б.1 — UML діаграма прецедентів

Рисунок Б.2 — UML діаграма прецедентів


Рисунок Б.3 – Діаграма діяльності для створення резервної копії та відновлення бази даних


Рисунок Б.4 – UML діаграма взаємодії. Створення резервної копії бази даних




ДОДАТОК В
Програмний код

     В.1 Підключення локалізації.

     GitHub репозиторій: https://github.com/NureShutOleksandr/apz-pzpi-22-3-shut-oleksandr/blob/main/Lab3/pzpi-22-3-shut-oleksandr-lab3/src/locales/i18n.ts

1 import i18n from 'i18next'
2 import { initReactI18next } from 'react-i18next'
3 import LanguageDetector from 'i18next-browser-languagedetector'
4
5 import translationEN from './en/translation.json'
6 import translationUK from './ua/translation.json'
7
8 const resources = {
9   en: { translation: translationEN },
10   ua: { translation: translationUK },
11 }
12
13 i18n
14   .use(LanguageDetector)
15   .use(initReactI18next)
16   .init({
17     resources,
18     fallbackLng: 'en',
19     interpolation: { escapeValue: false },
20   })
21
22 export default i18n




     В.2 Конвертація величин.

     GitHub репозиторій: https://github.com/NureShutOleksandr/apz-pzpi-22-3-shut-oleksandr/blob/main/Lab3/pzpi-22-3-shut-oleksandr-lab3/src/utils/parsers.ts

1 export const temperatureToDisplay = (language: string, temperature: number | undefined): number | undefined => {
2   if (typeof temperature !== 'number') return undefined
3
4   const converted = language === 'en' ? (temperature * 9) / 5 + 32 : temperature
5
6   return Math.round(converted * 10) / 10
7 }

     В.3 Адміністративна панель. Платформний адміністратор.

     GitHub репозиторій: https://github.com/NureShutOleksandr/apz-pzpi-22-3-shut-oleksandr/blob/main/Lab3/pzpi-22-3-shut-oleksandr-lab3/src/pages/dashboards/platform-admin-dashboard.tsx

1 import React, { useEffect, useState } from 'react'
2 import MainLayout from '@shared/layouts/main.layout'
3 import styled from 'styled-components'
4 import { usePlatformAdminStore } from '@store/platformAdmin.store'
5 import { useAuthStore } from '@store/store'
6 import { useTranslation } from 'react-i18next'
7
8 export const PlatformAdminDashboard: React.FC = () => {
9   const { roles, isLoadingRoles, isUpdatingRole, getRoles, updateUserRole } = usePlatformAdminStore()
10   const { user: currentUser, setUser, users, getUsers } = useAuthStore()
11   const [selectedUserId, setSelectedUserId] = useState<string>('')
12   const [selectedRole, setSelectedRole] = useState<string>('')
13   const [searchTerm, setSearchTerm] = useState<string>('')
14   const { t } = useTranslation()
15
16   useEffect(() => {
17     const fetchData = async () => {
18       try {
19         await getRoles()
20         await getUsers()
21       } catch (error) {
22         console.error('Failed to fetch data:', error)
23       }
24     }
25     fetchData()
26   }, [getRoles, getUsers])
27
28   const handleUpdateRole = async () => {
29     if (!selectedUserId || !selectedRole) {
30       alert('Please select a user and a role')
31       return
32     }
33     try {
34       const updatedUser = await updateUserRole(selectedUserId, selectedRole)
35       await getUsers()
36       if (currentUser?._id === updatedUser._id) {
37         setUser(updatedUser)
38       }
39       setSelectedUserId('')
40       setSelectedRole('')
41     } catch (error) {
42       console.error('Failed to update role:', error)
43     }
44   }
45
46   const handleSelectUser = (userId: string) => {
47     setSelectedUserId(userId)
48   }
49
50   const filteredUsers = users?.filter(user => user.username.toLowerCase().includes(searchTerm.toLowerCase())) || []
51
52   return (
53     <MainLayout mainStyle={{ display: 'flex', justifyContent: 'center', alignItems: 'flex-start', padding: '2rem 0' }}>
54       <DashboardContainer>
55         <Header>
56           <Title>{t('platformAdminDashboard.title')}</Title>
57         </Header>
58         <ActionsList>
59           <ActionItem>
60             <ActionLabel>{t('platformAdminDashboard.updateUserRole')}</ActionLabel>
61             {isLoadingRoles ? (
62               <LoadingText>{t('platformAdminDashboard.loadingRoles')}</LoadingText>
63             ) : (
64               <>
65                 <SelectContainer>
66                   <SelectedUserText>
67                     {selectedUserId
68                       ? t('platformAdminDashboard.selectedUser', {
69                           username: users?.find(u => u._id === selectedUserId)?.username || 'Unknown',
70                         })
71                       : t('platformAdminDashboard.noUserSelected')}
72                   </SelectedUserText>
73                   <Select
74                     value={selectedRole}
75                     onChange={e => setSelectedRole(e.target.value)}
76                     disabled={isUpdatingRole}
77                   >
78                     <option value="">{t('platformAdminDashboard.selectRole')}</option>
79                     {roles?.map(role => (
80                       <option key={role._id} value={role.value}>
81                         {role.value} ({role.description})
82                       </option>
83                     ))}
84                   </Select>
85                 </SelectContainer>
86                 <UpdateButton onClick={handleUpdateRole} disabled={isUpdatingRole}>
87                   {isUpdatingRole ? t('platformAdminDashboard.updating') : t('platformAdminDashboard.updateRoleButton')}
88                 </UpdateButton>
89               </>
90             )}
91           </ActionItem>
92           <ActionItem>
93             <ActionLabel>{t('platformAdminDashboard.userList')}</ActionLabel>
94             <SearchInput
95               type="text"
96               placeholder={t('platformAdminDashboard.searchUsers')}
97               value={searchTerm}
98               onChange={e => setSearchTerm(e.target.value)}
99             />
100             <UserList>
101               {filteredUsers.map(user => (
102                 <UserItem
103                   key={user._id}
104                   onClick={() => handleSelectUser(user._id)}
105                   isSelected={user._id === selectedUserId}
106                 >
107                   {user.username} - {user.roles.map(r => r.value).join(', ')}
108                 </UserItem>
109               ))}
110             </UserList>
111           </ActionItem>
112         </ActionsList>
113       </DashboardContainer>
114     </MainLayout>
115   )
116 }
117
118 const DashboardContainer = styled.div`
119   width: 100%;
120   max-width: 800px;
121   background-color: #fff;
122   border-radius: 12px;
123   box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
124   padding: 1.5rem;
125 `
126
127 const Header = styled.div`
128   margin-bottom: 1.5rem;
129 `
130
131 const Title = styled.h2`
132   font-size: 1.8rem;
133   color: #333;
134   margin: 0;
135 `
136
137 const ActionsList = styled.ul`
138   list-style: none;
139   padding: 0;
140 `
141
142 const ActionItem = styled.li`
143   padding: 1rem;
144   border-bottom: 1px solid #eee;
145   &:last-child {
146     border-bottom: none;
147   }
148 `
149
150 const ActionLabel = styled.h3`
151   font-size: 1.2rem;
152   color: #2c3e50;
153   margin-bottom: 0.5rem;
154 `
155
156 const SelectContainer = styled.div`
157   display: flex;
158   gap: 1rem;
159   margin-bottom: 1rem;
160   align-items: center;
161 `
162
163 const SelectedUserText = styled.p`
164   font-size: 1rem;
165   color: #2c3e50;
166   margin: 0;
167 `
168
169 const Select = styled.select`
170   padding: 0.75rem;
171   border: 1px solid #ddd;
172   border-radius: 8px;
173   font-size: 1rem;
174   outline: none;
175   transition: border-color 0.3s ease;
176   width: 100%;
177   max-width: 300px;
178
179   &:focus {
180     border-color: #4a90e2;
181   }
182
183   &:disabled {
184     background-color: #f5f5f5;
185     cursor: not-allowed;
186   }
187 `
188
189 const UpdateButton = styled.button`
190   padding: 0.75rem 1.5rem;
191   background-color: #4a90e2;
192   color: #fff;
193   border: none;
194   border-radius: 8px;
195   font-weight: 500;
196   cursor: pointer;
197   transition: background-color 0.3s ease;
198
199   &:hover:not(:disabled) {
200     background-color: #357abd;
201   }
202
203   &:focus {
204     outline: none;
205     box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.3);
206   }
207
208   &:disabled {
209     background-color: #a3bffa;
210     cursor: not-allowed;
211   }
212 `
213
214 const LoadingText = styled.p`
215   font-size: 1rem;
216   color: #7f8c8d;
217 `
218
219 const SearchInput = styled.input`
220   padding: 0.75rem;
221   border: 1px solid #ddd;
222   border-radius: 8px;
223   font-size: 1rem;
224   outline: none;
225   transition: border-color 0.3s ease;
226   width: 100%;
227   margin-bottom: 1rem;
228
229   &:focus {
230     border-color: #4a90e2;
231   }
232 `
233
234 const UserList = styled.ul`
235   list-style: none;
236   padding: 0;
237   max-height: 200px;
238   overflow-y: auto;
239 `
240
241 const UserItem = styled.li<{ isSelected: boolean }>`
242   padding: 0.5rem;
243   border-bottom: 1px solid #eee;
244   font-size: 0.9rem;
245   color: #2c3e50;
246   cursor: pointer;
247   background-color: ${props => (props.isSelected ? '#e6f0fa' : 'transparent')};
248
249   &:last-child {
250     border-bottom: none;
251   }
252
253   &:hover {
254     background-color: #f0f0f0;
255   }
256 `

     В.4 Адміністративна панель. Системний адміністратор.

     GitHub репозиторій: https://github.com/NureShutOleksandr/apz-pzpi-22-3-shut-oleksandr/blob/main/Lab3/pzpi-22-3-shut-oleksandr-lab3/src/pages/dashboards/system-admin-dashboard.page.tsx

1 import React, { useState } from 'react'
2 import MainLayout from '@shared/layouts/main.layout'
3 import styled from 'styled-components'
4 import { useSystemAdminStore } from '@store/systemAdmin.store'
5 import { configExample } from '@shared/consts/config-example.const'
6 import { useTranslation } from 'react-i18next'
7
8 export const SystemAdminDashboard: React.FC = () => {
9   const { lastExportedConfig, isExporting, isImporting, exportConfig, importConfig } = useSystemAdminStore()
10   // eslint-disable-next-line @typescript-eslint/no-explicit-any
11   const [importConfigData, setImportConfigData] = useState<any[]>(configExample)
12   const { t } = useTranslation()
13
14   const handleExportConfig = async () => {
15     try {
16       const blob = await exportConfig()
17       const url = window.URL.createObjectURL(blob)
18       const link = document.createElement('a')
19       link.href = url
20       link.setAttribute('download', 'climate-config.json')
21       document.body.appendChild(link)
22       link.click()
23       link.remove()
24       window.URL.revokeObjectURL(url)
25     } catch (error) {
26       console.error('Failed to export config:', error)
27     }
28   }
29
30   const handleImportConfig = async () => {
31     try {
32       await importConfig(importConfigData)
33     } catch (error) {
34       console.error('Failed to import config:', error)
35     }
36   }
37
38   return (
39     <MainLayout mainStyle={{ display: 'flex', justifyContent: 'center', alignItems: 'flex-start', padding: '2rem 0' }}>
40       <DashboardContainer>
41         <Header>
42           <Title>{t('systemAdminDashboard.title')}</Title>
43         </Header>
44         <ActionsList>
45           <ActionItem>
46             <ActionLabel>{t('systemAdminDashboard.exportConfiguration')}</ActionLabel>
47             <ExportButton onClick={handleExportConfig} disabled={isExporting}>
48               {isExporting ? t('systemAdminDashboard.exporting') : t('systemAdminDashboard.exportButton')}
49             </ExportButton>
50             {lastExportedConfig && (
51               <ConfigPreview>
52                 <ConfigLabel>{t('systemAdminDashboard.lastExportedConfig')}</ConfigLabel>
53                 <pre>{JSON.stringify(lastExportedConfig, null, 2)}</pre>
54               </ConfigPreview>
55             )}
56           </ActionItem>
57           <ActionItem>
58             <ActionLabel>{t('systemAdminDashboard.importConfiguration')}</ActionLabel>
59             <ImportInput
60               value={JSON.stringify(importConfigData, null, 2)}
61               onChange={e => setImportConfigData(JSON.parse(e.target.value))}
62               placeholder={t('systemAdminDashboard.pasteConfigJson')}
63               disabled={isImporting}
64             />
65             <ImportButton onClick={handleImportConfig} disabled={isImporting}>
66               {isImporting ? t('systemAdminDashboard.importing') : t('systemAdminDashboard.importButton')}
67             </ImportButton>
68           </ActionItem>
69         </ActionsList>
70       </DashboardContainer>
71     </MainLayout>
72   )
73 }
74
75 const DashboardContainer = styled.div`
76   width: 100%;
77   max-width: 800px;
78   background-color: #fff;
79   border-radius: 12px;
80   box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
81   padding: 1.5rem;
82 `
83
84 const Header = styled.div`
85   margin-bottom: 1.5rem;
86 `
87
88 const Title = styled.h2`
89   font-size: 1.8rem;
90   color: #333;
91   margin: 0;
92 `
93
94 const ActionsList = styled.ul`
95   list-style: none;
96   padding: 0;
97 `
98
99 const ActionItem = styled.li`
100   padding: 1rem;
101   border-bottom: 1px solid #eee;
102   &:last-child {
103     border-bottom: none;
104   }
105 `
106
107 const ActionLabel = styled.h3`
108   font-size: 1.2rem;
109   color: #2c3e50;
110   margin-bottom: 0.5rem;
111 `
112
113 const ExportButton = styled.button`
114   padding: 0.75rem 1.5rem;
115   background-color: #4a90e2;
116   color: #fff;
117   border: none;
118   border-radius: 8px;
119   font-weight: 500;
120   cursor: pointer;
121   transition: background-color 0.3s ease;
122
123   &:hover:not(:disabled) {
124     background-color: #357abd;
125   }
126
127   &:focus {
128     outline: none;
129     box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.3);
130   }
131
132   &:disabled {
133     background-color: #a3bffa;
134     cursor: not-allowed;
135   }
136 `
137
138 const ImportButton = styled.button`
139   padding: 0.75rem 1.5rem;
140   background-color: #2ecc71;
141   color: #fff;
142   border: none;
143   border-radius: 8px;
144   font-weight: 500;
145   cursor: pointer;
146   transition: background-color 0.3s ease;
147
148   &:hover:not(:disabled) {
149     background-color: #27ae60;
150   }
151
152   &:focus {
153     outline: none;
154     box-shadow: 0 0 0 3px rgba(46, 204, 113, 0.3);
155   }
156
157   &:disabled {
158     background-color: #a3d9b1;
159     cursor: not-allowed;
160   }
161 `
162
163 const ImportInput = styled.textarea`
164   padding: 0.75rem;
165   border: 1px solid #ddd;
166   border-radius: 8px;
167   font-size: 1rem;
168   outline: none;
169   transition: border-color 0.3s ease;
170   width: 100%;
171   min-height: 150px;
172   resize: vertical;
173
174   &:focus {
175     border-color: #4a90e2;
176   }
177 
178   &:disabled {
179     background-color: #f5f5f5;
180     cursor: not-allowed;
181   }
182
183   &::placeholder {
184     color: #999;
185   }
186 `
187
188 const ConfigPreview = styled.div`
189   margin-top: 0.5rem;
190   padding: 0.5rem;
191   background-color: #f9f9f9;
192   border-radius: 4px;
193   overflow-x: auto;
194 `
195
196 const ConfigLabel = styled.p`
197   margin: 0 0 0.5rem 0;
198   font-size: 0.9rem;
199   color: #7f8c8d;
200 `

     В.5 Адміністративна панель. Адміністратор баз даних

     GitHub репозиторій: https://github.com/NureShutOleksandr/apz-pzpi-22-3-shut-oleksandr/blob/main/Lab3/pzpi-22-3-shut-oleksandr-lab3/src/pages/dashboards/db-admin-dashboard.page.tsx

1 import React, { useState } from 'react'
2 import MainLayout from '@shared/layouts/main.layout'
3 import styled from 'styled-components'
4 import { useDbAdminStore } from '@store/dbAdmin.store'
5 import { useTranslation } from 'react-i18next'
6
7 export const DbAdminDashboard: React.FC = () => {
8   const { t } = useTranslation()
9   const { lastBackupPath, isCreatingBackup, isRestoringBackup, createBackup, restoreBackup } = useDbAdminStore()
10   const [backupName, setBackupName] = useState('')
11
12   const handleCreateBackup = async () => {
13     try {
14       await createBackup()
15     } catch (error) {
16       console.error('Failed to create backup:', error)
17     }
18   }
19
20   const handleRestoreBackup = async () => {
21     if (!backupName) {
22       alert('Please enter a backup name')
23       return
24     }
25     try {
26       await restoreBackup(backupName)
27     } catch (error) {
28       console.error('Failed to restore backup:', error)
29     }
30   }
31
32   return (
33     <MainLayout mainStyle={{ display: 'flex', justifyContent: 'center', alignItems: 'flex-start', padding: '2rem 0' }}>
34       <DashboardContainer>
35         <Header>
36           <Title>{t('dbAdminDashboard.title')}</Title>
37         </Header>
38         <ActionsList>
39           <ActionItem>
40             <ActionLabel>{t('dbAdminDashboard.createBackup')}</ActionLabel>
41             <CreateBackupButton onClick={handleCreateBackup} disabled={isCreatingBackup}>
42               {isCreatingBackup ? t('dbAdminDashboard.creating') : t('dbAdminDashboard.createBackupButton')}
43             </CreateBackupButton>
44             {lastBackupPath && (
45               <BackupPath>{t('dbAdminDashboard.lastBackupPath', { path: lastBackupPath })}</BackupPath>
46             )}
47           </ActionItem>
48           <ActionItem>
49             <ActionLabel>{t('dbAdminDashboard.restoreBackup')}</ActionLabel>
50             <InputGroup>
51               <RestoreInput
52                 type="text"
53                 value={backupName}
54                 onChange={e => setBackupName(e.target.value)}
55                 placeholder={t('dbAdminDashboard.enterBackupFolderName')}
56                 disabled={isRestoringBackup}
57               />
58               <RestoreButton onClick={handleRestoreBackup} disabled={isRestoringBackup}>
59                 {isRestoringBackup ? t('dbAdminDashboard.restoring') : t('dbAdminDashboard.restoreButton')}
60               </RestoreButton>
61             </InputGroup>
62           </ActionItem>
63         </ActionsList>
64       </DashboardContainer>
65     </MainLayout>
66   )
67 }
68
69 const DashboardContainer = styled.div`
70   width: 100%;
71   max-width: 800px;
72   background-color: #fff;
73   border-radius: 12px;
74   box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
75   padding: 1.5rem;
76 `
77
78 const Header = styled.div`
79   margin-bottom: 1.5rem;
80 `
81
82 const Title = styled.h2`
83   font-size: 1.8rem;
84   color: #333;
85   margin: 0;
86 `
87
88 const ActionsList = styled.ul`
89   list-style: none;
90   padding: 0;
91 `
92
93 const ActionItem = styled.li`
94   padding: 1rem;
95   border-bottom: 1px solid #eee;
96   &:last-child {
97     border-bottom: none;
98   }
99 `
100
101 const ActionLabel = styled.h3`
102   font-size: 1.2rem;
103   color: #2c3e50;
104   margin-bottom: 0.5rem;
105 `
106
107 const CreateBackupButton = styled.button`
108   padding: 0.75rem 1.5rem;
109   background-color: #4a90e2;
110   color: #fff;
111   border: none;
112   border-radius: 8px;
113   font-weight: 500;
114   cursor: pointer;
115   transition: background-color 0.3s ease;
116
117   &:hover:not(:disabled) {
118     background-color: #357abd;
119   }
120
121   &:focus {
122     outline: none;
123     box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.3);
124   }
125
126   &:disabled {
127     background-color: #a3bffa;
128     cursor: not-allowed;
129   }
130 `
131
132 const RestoreButton = styled.button`
133   padding: 0.75rem 1.5rem;
134   background-color: #2ecc71;
135   color: #fff;
136   border: none;
137   border-radius: 8px;
138   font-weight: 500;
139   cursor: pointer;
140   transition: background-color 0.3s ease;
141
142   &:hover:not(:disabled) {
143     background-color: #27ae60;
144   }
145
146   &:focus {
147     outline: none;
148     box-shadow: 0 0 0 3px rgba(46, 204, 113, 0.3);
149   }
150
151   &:disabled {
152     background-color: #a3d9b1;
153     cursor: not-allowed;
154   }
155 `
156
157 const InputGroup = styled.div`
158   display: flex;
159   gap: 0.5rem;
160 `
161
162 const RestoreInput = styled.input`
163   padding: 0.75rem;
164   border: 1px solid #ddd;
165   border-radius: 8px;
166   font-size: 1rem;
167   outline: none;
168   transition: border-color 0.3s ease;
169   flex: 1;
170
171   &:focus {
172     border-color: #4a90e2;
173   }
174
175   &:disabled {
176     background-color: #f5f5f5;
177     cursor: not-allowed;
178   }
179
180   &::placeholder {
181     color: #999;
182   }
183 `
184
185 const BackupPath = styled.p`
186   margin-top: 0.5rem;
187   font-size: 0.9rem;
188   color: #7f8c8d;
189 `
