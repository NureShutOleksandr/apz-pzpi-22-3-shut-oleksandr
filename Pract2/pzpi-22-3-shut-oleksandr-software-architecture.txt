Харківський національний університет радіоелектроніки
Факультет комп'ютерних наук
Катедра програмної інженерії
    
    
    
    
    
    
ЗВІТ
з практичного заняття №2
з дисципліни  «Архітектура програмного забезпечення»
на тему: «Архітектура відомих програмних систем»
    
    
    
    
    
    
    Виконав
    ст. гр. ПЗПІ-22-3
    Шуть Олександр Вікторович

    Перевірив
    ст. викладач катедри ПІ
    Сокорчук Ігор Петрович
    


Харків 2025
ІСТОРІЯ ЗМІН
 
№	Дата	Версія звіту	Опис змін та виправлень
1	07.04.2025	0.1	Сформульовано завдання на практичну роботу.
2	08.04.2025	0.1	писано виконану роботу. Додано посилання на відеозапис доповіді із зазначенням часових міток. Оновлено додаток Б, додано слайди презентації.

1 ЗАВДАННЯ

     Дослідити архітектуру програмної системи Netflix, її основні принципи побудови, ключові компоненти та підходи до реалізації. Розглянути структуру цієї архітектури, її роль у забезпеченні масштабованості, надійності та високої доступності для глобальної стрімінгової платформи. Проаналізувати технологічні рішення, які використовуються для підтримки основних функцій системи, включаючи стрімінг відео, персоналізовані рекомендації та управління даними, а також оцінити їхній вплив на ефективність роботи платформи. Вивчити практичні аспекти масштабування, резервування та подолання викликів у реальних умовах експлуатації, щоб продемонструвати, як архітектура Netflix сприяє її успіху як провідного сервісу потокового відео.

2 ОПИС ВИКОНАНОЇ РОБОТИ

     Було підготовлено доповідь, яку представлено у форматі презентації з відеосупроводом. Посилання на відеозапис розміщено в додатку А, а слайди презентації наведено в додатку Б.
     Архітектура програмної системи Netflix являє собою складну розподілену структуру, що базується на мікросервісному підході та хмарних технологіях. Вона поєднує сучасні рішення для забезпечення високої продуктивності, доступності та адаптивності до потреб глобальної аудиторії. Основним завданням архітектури є підтримка потокового відтворення відеоконтенту, створення персоналізованих рекомендацій і управління великою кількістю одночасних користувачів. Netflix як платформа світового рівня потребує інтеграції потужних обчислювальних ресурсів, оптимізованих систем доставки контенту та гнучких механізмів обробки даних, що враховують різноманітні регіональні особливості.
     Фундаментальні вимоги до архітектури Netflix сформовано з огляду на ключові аспекти її функціонування. Система має гарантувати високу доступність, що досягається показником безперебійної роботи на рівні 99,99%, мінімальну затримку під час передачі відеопотоків і здатність обробляти пікові навантаження від мільйонів користувачів. Крім того, архітектура повинна забезпечувати глобальну доступність контенту з урахуванням різної швидкості інтернет-з’єднань і потреб локалізованих ринків. Реалізація цих вимог здійснюється завдяки використанню хмарної інфраструктури Amazon Web Services (AWS), яка дозволяє динамічно розподіляти ресурси та підтримувати стабільність роботи.
     Структурна організація архітектури Netflix базується на мікросервісах, що взаємодіють між собою для виконання основних функцій платформи. Кожен мікросервіс відповідає за окрему задачу, наприклад, обробку відеопотоків, авторизацію чи аналіз даних. Система доставки контенту використовує адаптивні протоколи HLS і DASH, які дозволяють оптимізувати якість відео залежно від умов мережі користувача. Важливим елементом є інтеграція з розподіленою мережею доставки контенту, що забезпечує швидкий доступ до контенту шляхом розміщення серверів у різних географічних зонах.
     Компонентна архітектура включає фронтенд і бекенд модулі, бази даних, аналітичні системи та системи управління контентом. Фронтенд реалізовано з використанням React.js для вебінтерфейсу та нативних застосунків для мобільних платформ, що забезпечує зручність і швидкість взаємодії з користувачами. Бекенд побудовано на основі мов програмування Java, Python і Node.js, які відповідають за логіку обробки запитів, аналітику та інтеграцію сервісів. Зв’язок між компонентами здійснюється через REST API та gRPC, що сприяє ефективній передачі даних.
     Бази даних відіграють ключову роль у зберіганні та обробці інформації. Для розподілених даних, таких як метадані контенту та профілі користувачів, використовується Cassandra, що відзначається високою швидкістю та масштабованістю. Elasticsearch забезпечує швидкий пошук контенту, а Amazon S3 застосовується для зберігання великих обсягів відеофайлів. Аналітичні системи, зокрема Apache Kafka і Apache Spark, обробляють потоки даних у реальному часі та аналізують великі обсяги інформації для вдосконалення рекомендацій і прогнозування навантажень.
     Технологічна основа Netflix включає широкий спектр інструментів. Хмарна інфраструктура AWS забезпечує обчислювальні ресурси (EC2), зберігання даних (S3) і серверлес-функції (Lambda). Розробка бекенду здійснюється переважно на Java та Python, тоді як фронтенд базується на React. Для контейнеризації та оркестрації мікросервісів застосовуються Docker і Kubernetes, а Apache Kafka використовується для потокової обробки подій. Такий набір технологій дозволяє швидко впроваджувати оновлення та підтримувати стабільність системи.
     Масштабованість і резервування реалізуються через автоматичне горизонтальне масштабування за допомогою AWS Auto Scaling, яке адаптує ресурси до змінних навантажень. Для перевірки стійкості системи застосовується підхід Chaos Engineering, що передбачає навмисне створення збоїв для тестування відмовостійкості. Реплікація даних у кількох регіонах AWS гарантує безперебійний доступ до контенту навіть у разі технічних проблем. Ці рішення забезпечують високу надійність платформи.
Серед основних викликів, з якими стикається Netflix, виділяються складність управління великою кількістю мікросервісів, необхідність синхронізації даних між ними та значні витрати на підтримку інфраструктури. Координація мікросервісів потребує ретельного моніторингу та автоматизації, тоді як синхронізація даних ускладнює швидкість обробки запитів. Високі витрати на AWS залишаються неминучими через глобальний масштаб платформи, однак вони компенсуються її ефективністю.
     Перспективи розвитку Netflix пов’язані з подальшим удосконаленням технологій. Розширення використання штучного інтелекту для персоналізованих рекомендацій дозволить підвищити залученість користувачів. Оптимізація стрімінгу для мереж 5G сприятиме зменшенню затримок і покращенню якості відео. Також планується розвиток інтерактивного контенту, що відкриває нові можливості для взаємодії з аудиторією.
     Таким чином, архітектура Netflix є прикладом сучасної програмної системи, що поєднує мікросервісний підхід, хмарні технології та інноваційні рішення для забезпечення високої продуктивності й адаптивності. Використання передових інструментів і стратегій масштабування дозволяє платформі ефективно функціонувати в умовах глобального ринку. Подальший розвиток системи зосереджений на впровадженні новітніх технологій для оптимізації роботи та підвищення якості користувацького досвіду.

ВИСНОВКИ

     У результаті виконання даної роботи було досліджено архітектуру програмної системи Netflix. Встановлено, що її основою є мікросервісний підхід у поєднанні з хмарною інфраструктурою Amazon Web Services, що забезпечує високу гнучкість, масштабованість і надійність платформи. Визначено ключові переваги такої архітектури, зокрема здатність обробляти великі обсяги одночасних користувачів, низьку затримку стрімінгу та адаптивність до глобальних ринків. Описано особливості реалізації основних функцій, таких як потокове відтворення відео, персоналізовані рекомендації та управління профілями, а також використання сучасних технологій, включаючи Java, Python, React, Docker і Kubernetes.
     З’ясовано, що серед недоліків архітектури Netflix можна виділити складність координації численних мікросервісів, необхідність синхронізації даних між ними та високі витрати на підтримку хмарної інфраструктури. Наведено приклади застосування розподілених баз даних (Cassandra, Elasticsearch, S3) та аналітичних систем (Apache Kafka, Apache Spark) для забезпечення ефективної роботи платформи. Підкреслено, що стратегії масштабування та резервування, такі як AWS Auto Scaling і Chaos Engineering, відіграють вирішальну роль у підтримці стабільності системи.
     Таким чином, архітектура Netflix є прикладом сучасного підходу до створення програмних систем, який демонструє успішну інтеграцію передових технологій для вирішення завдань глобального рівня.

ДОДАТОК А
Посилання на відеозапис доповіді

     Відеозапис доповіді на YouTube: https://youtu.be/MJZCBwkiXKs
     Нижче наведено хронологічний опис доповіді.
     00:00 Вітання. Оголошується ім’я доповідача та його академічна група.
     00:14 Зміст. Стислий перелік підтем, що будуть розглянуті протягом доповіді.
     00:36 Вступ. Описується контекст, у якому стає важливим застосування патерну Абстрактна фабрика.
     01:08 Загальна архітектура Netflix
     01:55 Вимоги до архітектури
     02:34 Фронтенд та бекенд Netflix
     03:14 Головні функції та як вони працюють
     03:53 Бази даних та аналітика
     04:36 Технологічний стек
     05:20 Масштабованість та резервування
     05:54 Виклики
     06:22 Перспективи
06:52 Висновки
ДОДАТОК Б
Слайди презентації доповіді


Рисунок Б.1 – Титульний слайд презентації


Рисунок Б.2 – Зміст доповіді



Рисунок Б.3 – Вступ


Рисунок Б.4 – Загальний опис архітектури Netflix


Рисунок Б.5 – Вимоги до архітектури Netflix


Рисунок Б.6 – Фронтенд та бекенд Netflix



Рисунок Б.7 – Головні функції та як вони працюють у Netflix


Рисунок Б.8 – База даних та аналітика Netflix


Рисунок Б.9 – Технологічний стек Netflix


Рисунок Б.10 – Масштабованість та резервування

 Рисунок Б.11 – Виклики, що постають перед такою архітектурою


Рисунок Б.12 – Перспективи, що постають перед такою архітектурою


Рисунок Б.13 – Висновки

